[tool.poetry]
name = "code_context_compiler"
version = "0.1.4"
description = "A CLI tool to scan a code project and create a single file with the entire project code, ideal for feeding context to LLMs."
authors = ["Chetan Choudhary <chetan.choudhary.office@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/chetanchoudhary/code_context_compiler"
repository = "https://github.com/chetanchoudhary/code_context_compiler"
keywords = ["cli", "code", "compiler", "context", "llm", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

[tool.poetry.dependencies]
python = "^3.8"
typer = "^0.6.1"
aiofiles = "^0.8.0"
pyyaml = "^6.0"
rich = "^10.12.0"
gitpython = "^3.1.18"
pathspec = "^0.9.0"

[tool.poetry.dev-dependencies]
pytest = "^7.0"
pytest-asyncio = "^0.19.0"
pytest-cov = "^3.0.0"
flake8 = "^4.0.1"

[tool.poetry.scripts]
code_context_compiler = "code_context_compiler.cli:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["code_context_compiler"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
